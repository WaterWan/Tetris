package water.eluosifangkuai.ui;

import java.awt.Graphics;
import java.awt.Image;

import javax.swing.ImageIcon;

import water.eluosifangkuai.config.ConfigFactory;
import water.eluosifangkuai.config.GameConfig;
import water.eluosifangkuai.dto.GameDto;


/**
 * 绘制窗口
 * @author Lenovo
 *
 */

public abstract class Layer {
	
	protected static final int PANDDING;

	private static final int SIZE ;
	
	static{
		//获得游戏配置
		GameConfig cfg=ConfigFactory.getGameConfig();
		PANDDING=cfg.getPadding();
		SIZE =cfg.getWindowSize();
	}
	
	private static Image WINDOW_IMG=new ImageIcon("graphics/window/Window.png").getImage();
	
	private static int WINDOW_W=WINDOW_IMG.getWidth(null);
	
	private static int WINDOW_H=WINDOW_IMG.getHeight(null);
	
	/*
	 * 数字图片 260 36
	 */
	private static final Image IMG_NUMBER=new ImageIcon("graphics/string/num.png").getImage();

	/*
	 * 数字切片的宽度
	 */
	private static final int IMG_NUMBER_W=IMG_NUMBER.getWidth(null)/10;
	
	/*
	 * 数字切片的高度
	 */
	private static final int IMG_NUMBER_H=IMG_NUMBER.getHeight(null);
	
	/**
	 * 窗口左上角x坐标
	 */
	protected final int x;
	
	/**
	 * 窗口左上角y坐标
	 */
	protected final int y;
	
	/**
	 * 窗口宽度
	 */
	protected final int w;
	
	/**
	 * 窗口高度
	 */
	protected final int h;
	
	/*
	 * 游戏数据
	 */
	protected GameDto dto=null;

	protected Layer(int x,int y,int w,int h){
		this.x=x;
		this.y=y;
		this.h=h;
		this.w=w;
		
	}
	
	/**
	 * 绘制窗口
	 */
	protected void createWindow(Graphics g){
		g.drawImage(WINDOW_IMG, x, y, x+SIZE,y+SIZE, 0, 0, SIZE, SIZE, null);//左上
		//(参数,显示起点x,显示起点y,显示终点x,显示终点y,切割起点x,切割起点y,切割终点x,切割终点y,null)
		//(a,b,c,d,a1,b1,c1,d1)表示将[从(a1,b1)到(c1,d1)的矩形区域]放大到[从(a,b)到(c,d)的矩形区域]
		//从左上角的坐标到右下角的坐标
		g.drawImage(WINDOW_IMG, x+SIZE, y, x+w-SIZE,y+SIZE, SIZE, 0, WINDOW_W-SIZE, SIZE, null);//中上
		g.drawImage(WINDOW_IMG, x+w-SIZE, y, x+w, y+SIZE, WINDOW_W-SIZE, 0, WINDOW_W, SIZE, null);//右上
		g.drawImage(WINDOW_IMG, x, y+SIZE, x+SIZE, y+h-SIZE, 0, SIZE, SIZE, WINDOW_H-SIZE, null);//左中
		g.drawImage(WINDOW_IMG, x+SIZE, y+SIZE, x+w-SIZE, y+h-SIZE, SIZE, SIZE, WINDOW_W-SIZE, WINDOW_H-SIZE, null);//中
		g.drawImage(WINDOW_IMG, x+w-SIZE, y+SIZE, x+w, y+h-SIZE, WINDOW_W-SIZE, SIZE, WINDOW_W, WINDOW_H-SIZE, null);//右中
		g.drawImage(WINDOW_IMG, x, y+h-SIZE, x+SIZE, y+h, 0, WINDOW_H-SIZE, SIZE, WINDOW_H, null);//左下
		g.drawImage(WINDOW_IMG, x+SIZE, y+h-SIZE, x+w-SIZE, y+h, SIZE, WINDOW_H-SIZE, WINDOW_W-SIZE, WINDOW_H, null);//中下
		g.drawImage(WINDOW_IMG, x+w-SIZE, y+h-SIZE, x+w, y+h, WINDOW_W-SIZE, WINDOW_H-SIZE, WINDOW_W, WINDOW_H, null);//右下
	
	}

	/*
	 * 刷新游戏具体内容
	 * 
	 * @author water
	 * @param g 画笔
	 */
	abstract public void paint(Graphics g);
	
	public void setDto(GameDto dto) {
		this.dto = dto;
	}
	
	protected void drawNumberLeftPad(int x, int y, int num, int maxBit, Graphics g){
		//把要打印的数字转化成字符串
		String strNum=Integer.toString(num);
		//循环绘制数字右对齐
		for (int i = 0; i < maxBit; i++) {
			//判断是否满足绘制条件
			if (maxBit-i<=strNum.length()) {
				//获得数字在字符串中的下标
				int idx=i-maxBit+strNum.length();
				//把数字num中的每一位取出
				int bit = strNum.charAt(idx) - '0';
				//绘制数字
				g.drawImage(IMG_NUMBER, 
						this.x + x+ IMG_NUMBER_W*i, this.y + y, 
						this.x + x + IMG_NUMBER_W*(i+1), this.y + y + IMG_NUMBER_H,
						bit * IMG_NUMBER_W, 0, 
						(bit + 1) * IMG_NUMBER_W, IMG_NUMBER_H, null);
			}
		}
	}
	
}
